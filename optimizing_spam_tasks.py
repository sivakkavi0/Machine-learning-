# -*- coding: utf-8 -*-
"""Optimizing Spam tasks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XoMXIKSIMF8JuJfG4_YcXNMtIDKrGn9h
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import  nltk 
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

df= pd.read_csv("/content/spam.csv",encoding="latin")
df.head()

df.info()

df.isna().sum()

df.rename({"v1":"label","v2":"text"},inplace=True,axis=1)

df.tail()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['label']=le.fit_transform(df['label'])

from pandas.core.common import random_state
from sklearn.model_selection import train_test_split
#x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.20, random_state=0)

#print("Before Oversampling, count of label '1': {}".format(sum(y_train==1)))
#print("Before Oversampling, count of label '0': {} \n".format(sum(x_train==0)))

#from imblearn.over_sampling import SMOTE
#sm=SMOTE(random_state=2)
#x_train_res, y_train_res=sm.fit_resamble(x_train,y_train.ravel())

#print("After Oversampling, the shape of train_x:{} ".format(x_train_res.shape))
#print("After Oversampling, the shape of train_x:{} ".format(x_train_res.shape))

#print("After Oversampling, count of label '1':{}".format(x_train_res==1))
#print("After Oversampling, count of label '0':{}".format(x_train_res==0))

nltk.download("stopwords")

from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

import re
corpus=[]
length=len(df)

for i in range (0,length):
  text =re.sub("[^a-zA-Z0-9]"," ",df["text"][i])
  text=text.lower()
  text=text.split()
  pe=PorterStemmer()
  stopword=stopwords.words("english")
  text=[pe.stem(word) for word in text if not word in set(stopword)]
  text=" ".join(text)
  corpus.append(text)

corpus

from sklearn.feature_extraction.text import CountVectorizer
cv= CountVectorizer(max_features=35000)
x=cv.fit_transform(corpus).toarray()

import pickle
pickle.dump(cv,open('ck1.pkl','wb'))

df.describe()

#df.shape

df["label"].value_counts().plot(kind="bar",figsize=(12,6))
plt.xticks(np.arange(2),('Non Spam','Spam'),rotation=0);

#sc=StandardScaler()
#x_bal=sc.fit_transform(x_bal)
#x_bal=pd.DataFrame(x_bal,columns=names)